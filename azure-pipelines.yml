pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  major: 1
  minor: 1
  revision: $[counter('rev', 0)]

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- powershell: |
    $sourceBranch = "$(Build.SourceBranch)"
    $branchLabel = "Main"
    Write-Host "##vso[task.setvariable variable=isMain;]false"
    if ($sourceBranch.endswith("master"))
    { 
      Write-Host "##vso[task.LogIssue type=warning;] This is a main build"
      Write-Host "##vso[task.setvariable variable=isMain;]true"
    }
    elseif ($sourceBranch.endswith("merge"))
    {
      Write-Host "##vso[task.LogIssue type=warning;] This is a PR build, use system.pr.sourcebranch"    
      Write-Host "##vso[task.LogIssue type=warning;] PR.SourceBrance is $(System.PullRequest.SourceBranch)"
      $branchLabel = "$(System.PullRequest.SourceBranch)"
    }
    else
    {
      Write-Host "##vso[task.LogIssue type=warning;] CI to a sub branch"    
      Write-Host "##vso[task.LogIssue type=warning;] SourceBranch is $(Build.SourceBranch)"
      $branchLabel = "$(Build.SourceBranch)"
    }
    Write-Host "##vso[task.setvariable variable=branchLabel;]$(branchLabel)"
    if($isMain)
    {
      Write-Host "##vso[task.setvariable variable=packageName;]Planomatic_$(major).$(minor).$(revision).0.msix"
    }
    else
    {
      Write-Host "##vso[task.setvariable variable=packageName;]Planomatic_$(branchLabel)_$(major).$(minor).$(revision).0.msix"
    }
  displayName: 'Setup Branch Label and Package Name'

- powershell: |
    Write-Host "##vso[task.LogIssue type=warning;] isMain is $(isMain)"
    Write-Host "##vso[task.LogIssue type=warning;] branchLabel is $(branchLabel)"
    [Reflection.Assembly]::LoadWithPartialName("System.Xml.Linq")
    $path = "PlanomaticPackage/Package.appxmanifest"
    $doc = [System.Xml.Linq.XDocument]::Load($path)
    $xIdentity = [System.Xml.Linq.XName]"{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Identity"
    $xProperties = [System.Xml.Linq.XName]"{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Properties"
    $xDisplayName = [System.Xml.Linq.XName]"{http://schemas.microsoft.com/appx/manifest/foundation/windows10}DisplayName"
    $xApplications = [System.Xml.Linq.XName]"{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Applications"
    $xApplication = [System.Xml.Linq.XName]"{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Application"
    $xVisualElements = [System.Xml.Linq.XName]"{http://schemas.microsoft.com/appx/manifest/uap/windows10}VisualElements"
    $doc.Root.Element($xIdentity).Attribute("Version").Value = "$(major).$(minor).$(revision).0"
    if (-not $isMain)
    {
      $doc.Root.Element($xIdentity).Attribute("Name").Value = "Planomatic$(branchLabel)"
      $doc.Root.Element($xProperties).Element($xDisplayName).Value = "Planomatic_$(branchLabel)"
      $doc.Root.Element($xApplications).Element($xApplication).Element($xVisualElements).Attribute("DisplayName").Value = "Planomatic_$(branchLabel)"
    }
    $doc.Save($path)
  displayName: 'Setting Version and Branch Name in Package Manifest'

- powershell: |
    if ($isMain)
    {
      ((Get-Content -path PlanoWeb\plano.appinstaller -Raw) -replace '<msix_version>','$(major).$(minor).$(revision).0' `
                                                         -replace '<msix_name>','$(packageName)' `
                                                         -replace '<appinstaller_file>','plano.appinstaller' `
                                                         -replace '<name>','Planomatic') `
        | Set-Content -Path $(Build.ArtifactStagingDirectory)\plano.appinstaller
    }
    else
    {
      ((Get-Content -path PlanoWeb\plano.appinstaller -Raw) -replace '<msix_version>','$(major).$(minor).$(revision).0' `
                                                         -replace '<msix_name>','$(packageName)' `
                                                         -replace '<appinstaller_file>','plano_$(branchLabel).appinstaller' `
                                                         -replace '<name>','Planomatic$(branchLabel)') `
        | Set-Content -Path $(Build.ArtifactStagingDirectory)\plano_$(branchLabel).appinstaller
    }
  displayName: 'Updating Appinstaller file'

- task: MSBuild@1
  inputs:
    solution: $(solution)
    platform: $(buildPlatform)
    configuration: $(buildConfiguration)
    msbuildArguments: '/p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\$(packageName) /p:AppxPackageSigningEnabled=false'
  displayName: 'Build and Package'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'certificate.pfx'
  displayName: 'Download Secure PFX File'

- script: '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool"
    sign /fd SHA256 /f $(Agent.TempDirectory)/certificate.pfx /p 1234 $(Build.ArtifactStagingDirectory)/$(packageName)'
  displayName: 'Sign MSIX Package'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'

- task: AzureFileCopy@4
  inputs:
    SourcePath: '$(Build.ArtifactStagingDirectory)\*'
    azureSubscription: 'planostorage'
    Destination: 'AzureBlob'
    storage: 'planomaticstorage'
    ContainerName: '$web'
    targetPath: 'branch'
    
